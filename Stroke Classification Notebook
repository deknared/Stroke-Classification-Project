{
  "nbformat": 4,
  "nbformat_minor": 5,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.10"
    },
    "colab": {
      "name": "Final Project Intro to DS - BF21DSY004.ipynb",
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "befef02b"
      },
      "source": [
        "# Data Presentation Project: \"Stroke Prediction Model\"\n",
        "\n",
        "## Student Name: Gavriel Owens Vincentio\n",
        "\n",
        "## Student ID: BF21DSY004\n",
        "\n",
        "The below data is from: https://www.kaggle.com/fedesoriano/stroke-prediction-dataset"
      ],
      "id": "befef02b"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "57feef94"
      },
      "source": [
        "---"
      ],
      "id": "57feef94"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1976a2b5"
      },
      "source": [
        "## INTRODUCTION\n",
        "\n",
        "According to the World Health Organization (WHO) stroke is the 2nd leading cause of death globally, responsible for approximately 11% of total deaths. \n",
        "This dataset is used to predict whether a patient is likely to get stroke based on the input parameters like gender, age, various diseases, and smoking status. Each row in the data provides relavant information about the patient."
      ],
      "id": "1976a2b5"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f6b42451"
      },
      "source": [
        "### In order for us to predict the stroke probability, there are 12 attributes that we need to take into account in this dataset:\n",
        "\n",
        "1) id: unique identifier,\n",
        "\n",
        "2) gender: \"Male\" or \"Female\"\n",
        "\n",
        "3) age: age of the patient,\n",
        "\n",
        "4) hypertension: 0 if the patient doesn't have hypertension, 1 if the patient has hypertension,\n",
        "\n",
        "5) heart_disease: 0 if the patient doesn't have any heart diseases, 1 if the patient has a heart disease,\n",
        "\n",
        "6) ever_married: \"No\" or \"Yes\",\n",
        "\n",
        "7) work_type: \"children\", \"Govt_job\", \"Never_worked\", \"Private\" or \"Self-employed\",\n",
        "\n",
        "8) Residence_type: \"Rural\" or \"Urban\",\n",
        "\n",
        "9) avg_glucose_level: average glucose level in blood,\n",
        "\n",
        "10) bmi: body mass index,\n",
        "\n",
        "11) smoking_status: \"formerly smoked\", \"never smoked\", \"smokes\" or \"Unknown\",\n",
        "\n",
        "### The target column:\n",
        "\n",
        "12) stroke: 1 if the patient have a stroke or 0 if not\n",
        "\n",
        "*Note: \"Unknown\" in smoking_status means that the information is unavailable for this patient*"
      ],
      "id": "f6b42451"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2b66e645"
      },
      "source": [
        "---"
      ],
      "id": "2b66e645"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a203fcab"
      },
      "source": [
        "## PROJECT OUTLINE\n",
        "\n",
        "### 1) DATA PREPROCESSING\n",
        "\n",
        "A) IMPORT LIBRARIES AND DATASET\n",
        "\n",
        "B) GENERAL DESCRIPTION AND DATA VISUALIZATION\n",
        "\n",
        "C) DEALING WITH NULL VALUES\n",
        "\n",
        "D) DEALING WITH CATEGORICAL DATA AND DATA NORMALIZATION\n",
        "\n",
        "\n",
        "\n",
        "### 2) FITTING AND TESTING MULTIPLE MODEL\n",
        "\n",
        "A) SPLITTING THE DATASET\n",
        "\n",
        "B) FITTING THE MODEL\n",
        "\n",
        "\n",
        "\n",
        "### 3) BUILDING THE BEST MODEL FOR PREDICTION\n",
        "\n",
        "A) ANALYSIS OF 2 MODELS: CONFUSION MATRIX AND CLASSIFICATION REPORT\n",
        "\n",
        "B) FIND THE BEST MODEL:\n",
        "\n",
        "- XGBOOST\n",
        "\n",
        "- LOGISTIC REGRESSION\n",
        "\n",
        "C) APPLY NEW PARAMETER AND TRAIN IT\n",
        "\n",
        "D) FIND THE BEST THRESHOLD\n",
        "\n",
        "### 4) PREDICTION\n",
        "\n",
        "### 5) CONCLUSIONS"
      ],
      "id": "a203fcab"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c13c6a79"
      },
      "source": [
        "---"
      ],
      "id": "c13c6a79"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cacf9ef9"
      },
      "source": [
        "## 1) DATA PREPROCESSING"
      ],
      "id": "cacf9ef9"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f7ac473f"
      },
      "source": [
        "### 1.A. IMPORTING LIBRARIES AND DATASET"
      ],
      "id": "f7ac473f"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cca5afe1"
      },
      "source": [
        "# Importing necessary libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import accuracy_score"
      ],
      "id": "cca5afe1",
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "65105ac7"
      },
      "source": [
        "# Importing the dataset\n",
        "stroke_df = pd.read_csv('healthcare-dataset-stroke-data.csv')"
      ],
      "id": "65105ac7",
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 362
        },
        "id": "5d4ac09f",
        "outputId": "66da573c-7230-4120-dcfa-2d3f0e8e7479"
      },
      "source": [
        "# Displaying the dataframe\n",
        "stroke_df.head(10)"
      ],
      "id": "5d4ac09f",
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>gender</th>\n",
              "      <th>age</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>heart_disease</th>\n",
              "      <th>ever_married</th>\n",
              "      <th>work_type</th>\n",
              "      <th>Residence_type</th>\n",
              "      <th>avg_glucose_level</th>\n",
              "      <th>bmi</th>\n",
              "      <th>smoking_status</th>\n",
              "      <th>stroke</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>9046</td>\n",
              "      <td>Male</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Private</td>\n",
              "      <td>Urban</td>\n",
              "      <td>228.69</td>\n",
              "      <td>36.6</td>\n",
              "      <td>formerly smoked</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>51676</td>\n",
              "      <td>Female</td>\n",
              "      <td>61.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Self-employed</td>\n",
              "      <td>Rural</td>\n",
              "      <td>202.21</td>\n",
              "      <td>NaN</td>\n",
              "      <td>never smoked</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>31112</td>\n",
              "      <td>Male</td>\n",
              "      <td>80.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Private</td>\n",
              "      <td>Rural</td>\n",
              "      <td>105.92</td>\n",
              "      <td>32.5</td>\n",
              "      <td>never smoked</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>60182</td>\n",
              "      <td>Female</td>\n",
              "      <td>49.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Private</td>\n",
              "      <td>Urban</td>\n",
              "      <td>171.23</td>\n",
              "      <td>34.4</td>\n",
              "      <td>smokes</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1665</td>\n",
              "      <td>Female</td>\n",
              "      <td>79.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Self-employed</td>\n",
              "      <td>Rural</td>\n",
              "      <td>174.12</td>\n",
              "      <td>24.0</td>\n",
              "      <td>never smoked</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>56669</td>\n",
              "      <td>Male</td>\n",
              "      <td>81.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Private</td>\n",
              "      <td>Urban</td>\n",
              "      <td>186.21</td>\n",
              "      <td>29.0</td>\n",
              "      <td>formerly smoked</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>53882</td>\n",
              "      <td>Male</td>\n",
              "      <td>74.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Private</td>\n",
              "      <td>Rural</td>\n",
              "      <td>70.09</td>\n",
              "      <td>27.4</td>\n",
              "      <td>never smoked</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>10434</td>\n",
              "      <td>Female</td>\n",
              "      <td>69.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>Private</td>\n",
              "      <td>Urban</td>\n",
              "      <td>94.39</td>\n",
              "      <td>22.8</td>\n",
              "      <td>never smoked</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>27419</td>\n",
              "      <td>Female</td>\n",
              "      <td>59.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Private</td>\n",
              "      <td>Rural</td>\n",
              "      <td>76.15</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>60491</td>\n",
              "      <td>Female</td>\n",
              "      <td>78.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Private</td>\n",
              "      <td>Urban</td>\n",
              "      <td>58.57</td>\n",
              "      <td>24.2</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      id  gender   age  ...   bmi   smoking_status stroke\n",
              "0   9046    Male  67.0  ...  36.6  formerly smoked      1\n",
              "1  51676  Female  61.0  ...   NaN     never smoked      1\n",
              "2  31112    Male  80.0  ...  32.5     never smoked      1\n",
              "3  60182  Female  49.0  ...  34.4           smokes      1\n",
              "4   1665  Female  79.0  ...  24.0     never smoked      1\n",
              "5  56669    Male  81.0  ...  29.0  formerly smoked      1\n",
              "6  53882    Male  74.0  ...  27.4     never smoked      1\n",
              "7  10434  Female  69.0  ...  22.8     never smoked      1\n",
              "8  27419  Female  59.0  ...   NaN          Unknown      1\n",
              "9  60491  Female  78.0  ...  24.2          Unknown      1\n",
              "\n",
              "[10 rows x 12 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "33773839"
      },
      "source": [
        "### 1.B. GENERAL DESCRIPTION AND DATA VISUALIZATION"
      ],
      "id": "33773839"
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "59ae0879",
        "outputId": "2260b286-4f70-463d-823f-22123c1cd127"
      },
      "source": [
        "# Checking the number of rows and columns in the dataframe\n",
        "stroke_df.shape"
      ],
      "id": "59ae0879",
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5110, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "deb0c67f",
        "outputId": "ac0d3557-0819-4222-fd6d-7a2259bfdbe7"
      },
      "source": [
        "# Checking if there are any missing values\n",
        "stroke_df.info()"
      ],
      "id": "deb0c67f",
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 5110 entries, 0 to 5109\n",
            "Data columns (total 12 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   id                 5110 non-null   int64  \n",
            " 1   gender             5110 non-null   object \n",
            " 2   age                5110 non-null   float64\n",
            " 3   hypertension       5110 non-null   int64  \n",
            " 4   heart_disease      5110 non-null   int64  \n",
            " 5   ever_married       5110 non-null   object \n",
            " 6   work_type          5110 non-null   object \n",
            " 7   Residence_type     5110 non-null   object \n",
            " 8   avg_glucose_level  5110 non-null   float64\n",
            " 9   bmi                4909 non-null   float64\n",
            " 10  smoking_status     5110 non-null   object \n",
            " 11  stroke             5110 non-null   int64  \n",
            "dtypes: float64(3), int64(4), object(5)\n",
            "memory usage: 479.2+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "a58f006f",
        "outputId": "e8c8f462-229d-466c-b312-74e0ebccd445"
      },
      "source": [
        "# Describing the dataset's statistical properties\n",
        "stroke_df.describe().round(decimals=2)"
      ],
      "id": "a58f006f",
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>age</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>heart_disease</th>\n",
              "      <th>avg_glucose_level</th>\n",
              "      <th>bmi</th>\n",
              "      <th>stroke</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>5110.00</td>\n",
              "      <td>5110.00</td>\n",
              "      <td>5110.0</td>\n",
              "      <td>5110.00</td>\n",
              "      <td>5110.00</td>\n",
              "      <td>4909.00</td>\n",
              "      <td>5110.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>36517.83</td>\n",
              "      <td>43.23</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.05</td>\n",
              "      <td>106.15</td>\n",
              "      <td>28.89</td>\n",
              "      <td>0.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>21161.72</td>\n",
              "      <td>22.61</td>\n",
              "      <td>0.3</td>\n",
              "      <td>0.23</td>\n",
              "      <td>45.28</td>\n",
              "      <td>7.85</td>\n",
              "      <td>0.22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>67.00</td>\n",
              "      <td>0.08</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>55.12</td>\n",
              "      <td>10.30</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>17741.25</td>\n",
              "      <td>25.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>77.24</td>\n",
              "      <td>23.50</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>36932.00</td>\n",
              "      <td>45.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>91.88</td>\n",
              "      <td>28.10</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>54682.00</td>\n",
              "      <td>61.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>114.09</td>\n",
              "      <td>33.10</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>72940.00</td>\n",
              "      <td>82.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.00</td>\n",
              "      <td>271.74</td>\n",
              "      <td>97.60</td>\n",
              "      <td>1.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "             id      age  hypertension  ...  avg_glucose_level      bmi   stroke\n",
              "count   5110.00  5110.00        5110.0  ...            5110.00  4909.00  5110.00\n",
              "mean   36517.83    43.23           0.1  ...             106.15    28.89     0.05\n",
              "std    21161.72    22.61           0.3  ...              45.28     7.85     0.22\n",
              "min       67.00     0.08           0.0  ...              55.12    10.30     0.00\n",
              "25%    17741.25    25.00           0.0  ...              77.24    23.50     0.00\n",
              "50%    36932.00    45.00           0.0  ...              91.88    28.10     0.00\n",
              "75%    54682.00    61.00           0.0  ...             114.09    33.10     0.00\n",
              "max    72940.00    82.00           1.0  ...             271.74    97.60     1.00\n",
              "\n",
              "[8 rows x 7 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b54a71b4",
        "outputId": "0f2ded28-3011-4b14-d02d-2488baeee5f1"
      },
      "source": [
        "# Here we check the distribution of stroke and no stroke in target column\n",
        "stroke_df['stroke'].value_counts()"
      ],
      "id": "b54a71b4",
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    4861\n",
              "1     249\n",
              "Name: stroke, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "3859636e",
        "outputId": "8b0c784e-4280-4768-d608-90c8ce0c7dea"
      },
      "source": [
        "# Visualizing target distribution using pie chart\n",
        "stroke_df['stroke'].value_counts().plot.pie()\n",
        "\n",
        "print('No Stroke', round(stroke_df['stroke'].value_counts()[0]/len(stroke_df) * 100,2), '% of the dataset')\n",
        "print('Stroke', round(stroke_df['stroke'].value_counts()[1]/len(stroke_df) * 100,2), '% of the dataset')"
      ],
      "id": "3859636e",
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "No Stroke 95.13 % of the dataset\n",
            "Stroke 4.87 % of the dataset\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 385
        },
        "id": "1e57a5da",
        "outputId": "1d26828d-4b45-40cf-a6e5-4fe90d86f36f"
      },
      "source": [
        "# Visualizing target distribution using bar chart\n",
        "colors = [\"#0101DF\", \"#DF0101\"]\n",
        "\n",
        "sns.countplot('stroke', data=stroke_df, palette=colors)\n",
        "plt.title('Target Distributions \\n (0: No Stroke || 1: Stroke)', fontsize=14)"
      ],
      "id": "1e57a5da",
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Target Distributions \\n (0: No Stroke || 1: Stroke)')"
            ]
          },
          "metadata": {},
          "execution_count": 60
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 878
        },
        "id": "e59f0dfd",
        "outputId": "123a33c8-2908-44f7-c070-7a75f9666fd2"
      },
      "source": [
        "# Visualizing Histogram of each attribute\n",
        "import matplotlib.pyplot as plt\n",
        "stroke_df.hist(bins=50, figsize=(20, 15))\n",
        "plt.show()"
      ],
      "id": "e59f0dfd",
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x1080 with 9 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 366
        },
        "id": "34140836",
        "outputId": "aae037fd-5363-4b76-cb75-6b2e81219a8d"
      },
      "source": [
        "# Visualizing the data correlation matrix\n",
        "cor_matrix = stroke_df.corr().round(2)\n",
        "\n",
        "sns.heatmap(cor_matrix, annot = True)"
      ],
      "id": "34140836",
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f6193ee2090>"
            ]
          },
          "metadata": {},
          "execution_count": 62
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "174902da",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 366
        },
        "outputId": "268becb6-d743-4465-984a-51d306b1f737"
      },
      "source": [
        "# Dropping irrelevant data\n",
        "stroke_df.drop('id', axis = 1, inplace = True)\n",
        "\n",
        "cor_matrix = stroke_df.corr().round(2)\n",
        "\n",
        "sns.heatmap(cor_matrix, annot = True)"
      ],
      "id": "174902da",
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f6193ecc150>"
            ]
          },
          "metadata": {},
          "execution_count": 63
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c8592bd5"
      },
      "source": [
        "# Setting up target variable in y and drop the target column from data frame\n",
        "y = stroke_df['stroke']\n",
        "stroke_df.drop('stroke', axis=1, inplace=True)"
      ],
      "id": "c8592bd5",
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2450519d"
      },
      "source": [
        "### 1.C. DEALING WITH NULL VALUES"
      ],
      "id": "2450519d"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aa1d0653"
      },
      "source": [
        "Since the only column that has null values is BMI, then we only have to deal with that column only. Because the column 'BMI' is a numerical column, we can choose either to fill NaN with mean or median of the data. For this particular project, I am going to change the null values with median (since the data is skewed)."
      ],
      "id": "aa1d0653"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e83ba4f2"
      },
      "source": [
        "# Substitute NaN with median values\n",
        "stroke_df['bmi'].fillna(stroke_df['bmi'].median(), inplace = True)"
      ],
      "id": "e83ba4f2",
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9d6ebc0e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f5a9e956-7903-41ec-ada3-72ce5be62b49"
      },
      "source": [
        "# Check if there are any NaN values\n",
        "stroke_df['bmi'].isnull().any()"
      ],
      "id": "9d6ebc0e",
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "22e2b704"
      },
      "source": [
        "### 1.D. DEALING WITH CATEGORICAL DATA AND DATA NORMALIZATION"
      ],
      "id": "22e2b704"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "45e90757"
      },
      "source": [
        "# Change the categorical attributes which only has 2 values into numeric attributes\n",
        "# for gender\n",
        "gender = {'Male': 1,\n",
        "          'Female': 0}\n",
        "\n",
        "stroke_df['gender'] = stroke_df['gender'].replace(gender)\n",
        "\n",
        "# for ever_married\n",
        "marital_status = {'Yes': 1,\n",
        "                  'No': 0}\n",
        "\n",
        "stroke_df['ever_married'] = stroke_df['ever_married'].replace(marital_status)\n",
        "\n",
        "# for Residence_type\n",
        "residence = {'Urban': 1,\n",
        "            'Rural': 0}\n",
        "\n",
        "stroke_df['Residence_type'] = stroke_df['Residence_type'].replace(residence)"
      ],
      "id": "45e90757",
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8cf1c6aa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "bd3c8b19-4e66-439e-b5ce-06f5295c6d91"
      },
      "source": [
        "stroke_df.head()"
      ],
      "id": "8cf1c6aa",
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>age</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>heart_disease</th>\n",
              "      <th>ever_married</th>\n",
              "      <th>work_type</th>\n",
              "      <th>Residence_type</th>\n",
              "      <th>avg_glucose_level</th>\n",
              "      <th>bmi</th>\n",
              "      <th>smoking_status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Private</td>\n",
              "      <td>1</td>\n",
              "      <td>228.69</td>\n",
              "      <td>36.6</td>\n",
              "      <td>formerly smoked</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>61.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Self-employed</td>\n",
              "      <td>0</td>\n",
              "      <td>202.21</td>\n",
              "      <td>28.1</td>\n",
              "      <td>never smoked</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>80.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Private</td>\n",
              "      <td>0</td>\n",
              "      <td>105.92</td>\n",
              "      <td>32.5</td>\n",
              "      <td>never smoked</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Private</td>\n",
              "      <td>1</td>\n",
              "      <td>171.23</td>\n",
              "      <td>34.4</td>\n",
              "      <td>smokes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>79.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Self-employed</td>\n",
              "      <td>0</td>\n",
              "      <td>174.12</td>\n",
              "      <td>24.0</td>\n",
              "      <td>never smoked</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   gender   age  hypertension  ...  avg_glucose_level   bmi   smoking_status\n",
              "0       1  67.0             0  ...             228.69  36.6  formerly smoked\n",
              "1       0  61.0             0  ...             202.21  28.1     never smoked\n",
              "2       1  80.0             0  ...             105.92  32.5     never smoked\n",
              "3       0  49.0             0  ...             171.23  34.4           smokes\n",
              "4       0  79.0             1  ...             174.12  24.0     never smoked\n",
              "\n",
              "[5 rows x 10 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9a0ac9be"
      },
      "source": [
        "As we can see now, these values have changed:\n",
        "\n",
        "\n",
        "for gender: 1 = Male, 0 = Female\n",
        "\n",
        "for ever_married: 1 = Yes, 0 = No\n",
        "\n",
        "for Residence_type: 1 = Urban, 0 = Rural"
      ],
      "id": "9a0ac9be"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "051e1582"
      },
      "source": [
        "# Import required data transformation and set up column transformer object\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "ct = ColumnTransformer([('cat', OneHotEncoder(),[5,9])], remainder = \"passthrough\")"
      ],
      "id": "051e1582",
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7e57b2f9"
      },
      "source": [
        "# The transformed data is now saved in a new data frame\n",
        "x = ct.fit_transform(stroke_df)"
      ],
      "id": "7e57b2f9",
      "execution_count": 70,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ATlBprOCESyw"
      },
      "source": [
        "# Normalizing the whole dataframe\n",
        "sc = StandardScaler()\n",
        "\n",
        "x = sc.fit_transform(x)"
      ],
      "id": "ATlBprOCESyw",
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a8ff1f8e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c2090fbe-40f2-4821-fa1f-1dd0370ea080"
      },
      "source": [
        "x.shape"
      ],
      "id": "a8ff1f8e",
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5110, 17)"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "16ef18a5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bb269f1d-fe03-4914-cd6d-7a672af5d0a1"
      },
      "source": [
        "stroke_df.shape"
      ],
      "id": "16ef18a5",
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5110, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fd38f022"
      },
      "source": [
        "Notice that our data matrix shape has changed, this is due to the onehotencoder increasing the number of columns based on the categorical data types. \n",
        "\n",
        "Explanation:\n",
        "\n",
        "Since there are two columns of categorical data types, 'work_type' and 'smoking_status' where in total, both columns have 9 unique values, making the total columns change from 10 to 17 (10-2+9=17)."
      ],
      "id": "fd38f022"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4f6cf3c2"
      },
      "source": [
        "---"
      ],
      "id": "4f6cf3c2"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bf2aee36"
      },
      "source": [
        "## 2) FITTING AND TESTING MULTIPLE MODELS"
      ],
      "id": "bf2aee36"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ed342ecb"
      },
      "source": [
        "### 2.A. SPLITTING DATASET BEFORE TESTING"
      ],
      "id": "ed342ecb"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d112de1e"
      },
      "source": [
        "In this project, we are splitting the dataset into train and test sets with ratio of 75 : 25."
      ],
      "id": "d112de1e"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "24c213e8"
      },
      "source": [
        "from sklearn import model_selection\n",
        "\n",
        "x_train, x_test, y_train, y_test = model_selection.train_test_split(x, y, test_size=0.25, random_state=5)"
      ],
      "id": "24c213e8",
      "execution_count": 74,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "37bef38f"
      },
      "source": [
        "### 2.B. FITTING THE MODEL"
      ],
      "id": "37bef38f"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "71f68c9b"
      },
      "source": [
        "# First, we import the classifiers that we want to use\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.neighbors  import KNeighborsClassifier\n",
        "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from lightgbm import LGBMClassifier\n",
        "from xgboost import XGBClassifier"
      ],
      "id": "71f68c9b",
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b0c69a4a"
      },
      "source": [
        "# Then, we start appending the classifier into models list\n",
        "results=[]\n",
        "names=[]\n",
        "\n",
        "models = []\n",
        "models.append(('LR',LogisticRegression(solver='liblinear',multi_class='ovr')))\n",
        "models.append(('CARD',DecisionTreeClassifier()))\n",
        "models.append(('KNN',KNeighborsClassifier()))\n",
        "models.append(('LDA',LinearDiscriminantAnalysis()))\n",
        "models.append(('LGBM',LGBMClassifier()))\n",
        "models.append(('XGB',XGBClassifier(use_label_encoder=False)))"
      ],
      "id": "b0c69a4a",
      "execution_count": 76,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "43ceb4ad",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "92d5fc30-0855-4a2e-db15-89b03c0bbc2c"
      },
      "source": [
        "#Evaluate each model in turn\n",
        "for name, model in models:\n",
        "    kfold = model_selection.KFold(n_splits=10,random_state=7, shuffle = True)\n",
        "    cv_results = model_selection.cross_val_score(model,x_train,y_train,cv = kfold, scoring='accuracy')\n",
        "    results.append(cv_results)\n",
        "    names.append(name)\n",
        "    msg=\"%s:%f(%f)\"%(name, cv_results.mean(), cv_results.std())\n",
        "    print(msg)"
      ],
      "id": "43ceb4ad",
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "LR:0.951977(0.009660)\n",
            "CARD:0.906828(0.017711)\n",
            "KNN:0.951455(0.009870)\n",
            "LDA:0.948065(0.008636)\n",
            "LGBM:0.947801(0.012264)\n",
            "XGB:0.951716(0.010345)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6ddd4961",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "outputId": "f0b19e17-1bf7-4fbd-bda1-afe109542d48"
      },
      "source": [
        "# Using boxplot algorithm comparison\n",
        "fig = plt.figure()\n",
        "fig.suptitle('Algorithm Comparison')\n",
        "ax = fig.add_subplot(111)\n",
        "plt.boxplot(results)\n",
        "ax.set_xticklabels(names)\n",
        "plt.show()"
      ],
      "id": "6ddd4961",
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "461ad48f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1616393a-b70e-401e-ffc4-0a2e50c407cd"
      },
      "source": [
        "# Now, we visualize the comparison using ROC curve\n",
        "from sklearn.metrics import roc_curve\n",
        "from sklearn.model_selection import cross_val_predict\n",
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "# Logistic Regression\n",
        "lr = LogisticRegression()\n",
        "lr_results = cross_val_score(lr, x, y, scoring = 'recall')\n",
        "print (lr_results.mean(), '+/-',lr_results.std())\n",
        "\n",
        "y_score_lr = cross_val_predict(lr, x, y, cv = 10, method = 'decision_function')\n",
        "fpr_lr, tpr_lr, threshold_lr = roc_curve(y, y_score_lr)"
      ],
      "id": "461ad48f",
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.008081632653061225 +/- 0.00989877968406473\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3dbf7413",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3b7e1db2-f4f3-4faf-dd02-1bcd3463b568"
      },
      "source": [
        "# Decission Tree Classifier\n",
        "dtc = DecisionTreeClassifier()\n",
        "dtc_results = cross_val_score(dtc,x, y, scoring = 'recall')\n",
        "print (dtc_results.mean(), '+/-',dtc_results.std())\n",
        "\n",
        "y_score_dtc = cross_val_predict(dtc,x, y, cv = 10, method = 'predict_proba')\n",
        "fpr_dtc, tpr_dtc, threshold_dtc = roc_curve(y, y_score_dtc[:,1]) "
      ],
      "id": "3dbf7413",
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.2164081632653061 +/- 0.06906498759468187\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "98b2209e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1b55f703-ba2e-41cb-9c37-550d8f2f031c"
      },
      "source": [
        "# K Neighbor Classifier\n",
        "knn = KNeighborsClassifier()\n",
        "knn_results = cross_val_score(knn, x, y, scoring = 'recall')\n",
        "print (knn_results.mean(), '+/-',knn_results.std())\n",
        "\n",
        "y_score_knn = cross_val_predict(knn, x, y, cv = 10, method = 'predict_proba')\n",
        "fpr_knn, tpr_knn, threshold_knn = roc_curve(y, y_score_knn[:,1])"
      ],
      "id": "98b2209e",
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.036081632653061226 +/- 0.029349862191537186\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b9f93db3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b45dc9a5-7579-40b7-8bc6-9393ad8b80dc"
      },
      "source": [
        "# Linear Discriminant Analysis\n",
        "lda = LinearDiscriminantAnalysis()\n",
        "lda_results = cross_val_score(lda, x, y, scoring = 'recall')\n",
        "print (lda_results.mean(), '+/-',lda_results.std())\n",
        "\n",
        "y_score_lda = cross_val_predict(lda, x, y, cv = 10, method = 'predict_proba')\n",
        "fpr_lda, tpr_lda, threshold_lda = roc_curve(y, y_score_lda[:,1])"
      ],
      "id": "b9f93db3",
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.06440816326530611 +/- 0.03916700325665243\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0c9a6333",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ef52fd99-1aaa-4f18-a5f9-8a4fad50178a"
      },
      "source": [
        "# LightGBM\n",
        "lgbm = LGBMClassifier()\n",
        "lgbm_results = cross_val_score(lgbm, x, y, scoring = 'recall')\n",
        "print (lgbm_results.mean(), '+/-',lgbm_results.std())\n",
        "\n",
        "y_score_lgbm = cross_val_predict(lgbm, x, y, cv = 10 ,method = 'predict_proba')\n",
        "fpr_lgbm, tpr_lgbm, threshold_lgbm = roc_curve(y, y_score_lgbm[:,1])"
      ],
      "id": "0c9a6333",
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.044 +/- 0.029393876913398138\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "764681e9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a0c856f5-ad9b-4ce1-d79c-12b515b7c7e5"
      },
      "source": [
        "# XGBoost\n",
        "xgb = XGBClassifier(use_label_encoder=False)\n",
        "xgb_results = cross_val_score(xgb, x, y, scoring = 'recall')\n",
        "print (xgb_results.mean(), '+/-',xgb_results.std())\n",
        "\n",
        "y_score_xgb = cross_val_predict(xgb, x, y, cv = 10 ,method = 'predict_proba')\n",
        "fpr_xgb, tpr_xgb, threshold_xgb = roc_curve(y, y_score_xgb[:,1])"
      ],
      "id": "764681e9",
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.004 +/- 0.008\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a0a31e32",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 322
        },
        "outputId": "91f0d046-f0d4-4b68-b1aa-733d1744298c"
      },
      "source": [
        "# ROC Curve for the models above\n",
        "plt.plot(fpr_lr, tpr_lr, label='Logistic Regression')\n",
        "plt.plot(fpr_dtc, tpr_dtc,label='CARD')\n",
        "plt.plot(fpr_knn, tpr_knn,label='KNN')\n",
        "plt.plot(fpr_lda, tpr_lda,label='LDA')\n",
        "plt.plot(fpr_lgbm, tpr_lgbm,label='LGBM')\n",
        "plt.plot(fpr_xgb, tpr_xgb,label='XGB')\n",
        "plt.legend()\n",
        "plt.plot([0, 1], [0, 1], 'k--')\n",
        "plt.axis([0, 1, 0, 1])\n",
        "plt.xlabel('False Positive Rate', fontsize=16)\n",
        "plt.ylabel('True Positive Rate', fontsize=16)\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.show()\n",
        "plt.show"
      ],
      "id": "a0a31e32",
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x432 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show>"
            ]
          },
          "metadata": {},
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3f943eca",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1c8cb38c-f353-4fa6-a622-a38825be23bd"
      },
      "source": [
        "from sklearn.metrics import roc_auc_score\n",
        "print ('AUC of Logistic Regression:',roc_auc_score(y, y_score_lr))\n",
        "print ('AUC of Decision Tree:',roc_auc_score(y, y_score_dtc[:,1]))\n",
        "print ('AUC of KNeighborsClassifier:',roc_auc_score(y, y_score_knn[:,1]))\n",
        "print ('AUC of Linear Discriminant Analysis:',roc_auc_score(y, y_score_lda[:,1]))\n",
        "print ('AUC of LightGBM:',roc_auc_score(y, y_score_lgbm[:,1]))\n",
        "print ('AUC of XGBoost:',roc_auc_score(y, y_score_xgb[:,1]))"
      ],
      "id": "3f943eca",
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "AUC of Logistic Regression: 0.8391508845503388\n",
            "AUC of Decision Tree: 0.5511583466141877\n",
            "AUC of KNeighborsClassifier: 0.6020010922108512\n",
            "AUC of Linear Discriminant Analysis: 0.8341624056398399\n",
            "AUC of LightGBM: 0.8323844648290757\n",
            "AUC of XGBoost: 0.8450535323767813\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zm3zB9cabija"
      },
      "source": [
        "From observation, the two highest performing classifier are XGBoost and Logistic Regression with 84.50% and 83.93%."
      ],
      "id": "zm3zB9cabija"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HmUHf59pe_gD"
      },
      "source": [
        "---"
      ],
      "id": "HmUHf59pe_gD"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "86NcKEefdtSS"
      },
      "source": [
        "## 3) BUILDING THE BEST MODEL FOR PREDICTION"
      ],
      "id": "86NcKEefdtSS"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7tUby1AHeACA"
      },
      "source": [
        "### 3.A. ANALYSIS OF 2 MODELS: CONFUSION MATRIX AND CLASSIFICATION REPORT"
      ],
      "id": "7tUby1AHeACA"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xKL4dKbXgIpf"
      },
      "source": [
        "#### CONFUSION MATRIX"
      ],
      "id": "xKL4dKbXgIpf"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WlFoKR60g6a2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        },
        "outputId": "6f2bfad3-c896-4416-9e6b-802a3ef6be5d"
      },
      "source": [
        "# XGBoost\n",
        "xgb.fit(x_train,y_train)\n",
        "predictions1 = xgb.predict(x_test)\n",
        "cm1 = confusion_matrix(y_test,predictions1)\n",
        "fig, ax= plt.subplots(figsize=(6,3))\n",
        "sns.heatmap(cm1, annot=True, ax = ax,linewidths=.5); #annot=True to annotate cells\n",
        "\n",
        "# Labels, title and ticks\n",
        "ax.set_xlabel('Predicted labels');ax.set_ylabel('True labels'); \n",
        "ax.set_title('Confusion Matrix'); \n",
        "ax.xaxis.set_ticklabels(['Positive', 'Negative']); ax.yaxis.set_ticklabels(['Negative', 'Positive']);\n",
        "\n",
        "# TP, FP, TN, and FN count\n",
        "tn, fp, fn, tp = confusion_matrix(y_test, predictions1).ravel()\n",
        "print('True Positive:', tp,';',\n",
        "      'False Positive:', fp,';',\n",
        "      'True Negative:', tn,';',\n",
        "      'False Negative', fn)"
      ],
      "id": "WlFoKR60g6a2",
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "True Positive: 0 ; False Positive: 1 ; True Negative: 1212 ; False Negative 65\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x216 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M3l03Ai3d6yu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        },
        "outputId": "3b3a6588-aac6-479c-f88c-0dec6de71146"
      },
      "source": [
        "# Logistic Regression\n",
        "lr.fit(x_train,y_train)\n",
        "predictions2 = lr.predict(x_test)\n",
        "cm2 = confusion_matrix(y_test,predictions2)\n",
        "fig, ax= plt.subplots(figsize=(6,3))\n",
        "sns.heatmap(cm2, annot=True, ax = ax,linewidths=.5); #annot=True to annotate cells\n",
        "\n",
        "# Labels, title and ticks\n",
        "ax.set_xlabel('Predicted labels');ax.set_ylabel('True labels'); \n",
        "ax.set_title('Confusion Matrix'); \n",
        "ax.xaxis.set_ticklabels(['Positive', 'Negative']); ax.yaxis.set_ticklabels(['Negative', 'Positive']);\n",
        "\n",
        "# TP, FP, TN, and FN count\n",
        "tn, fp, fn, tp = confusion_matrix(y_test, predictions2).ravel()\n",
        "print('True Positive:', tp,';',\n",
        "      'False Positive:', fp,';',\n",
        "      'True Negative:', tn,';',\n",
        "      'False Negative', fn)"
      ],
      "id": "M3l03Ai3d6yu",
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "True Positive: 0 ; False Positive: 0 ; True Negative: 1213 ; False Negative 65\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXIAAADgCAYAAAAe/e31AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3deZgcVfn28e+dBUggC2EnAcKmiGwiS1gNgmyiAVRAUQHRqICAikiEFxQQEQUhshkBCYtAUHYCBFlk+clOiCSAhATISsIWdpKZed4/6nTSTGZ6enqmpruT+8NV13Sdqj7n9GR45sypU08pIjAzs/rVrdodMDOzjnEgNzOrcw7kZmZ1zoHczKzOOZCbmdU5B3IzszrnQG4dJqmXpFslzZN0fQfqOVjSuM7sWzVIukPSIdXuhy09HMiXIpK+JekJSe9JmpUCzo6dUPXXgdWAlSLiG5VWEhFXR8TundCfT5A0VFJIurFZ+eap/P4y6/m1pKvaOi8i9oqI0RV216zdHMiXEpJ+BpwLnEEWdNcGLgSGdUL16wD/i4iGTqgrL3OB7SStVFR2CPC/zmpAGf8/ZV3OP3RLAUn9gFOBIyPihoh4PyIWRMStEfGLdM6yks6VNDNt50paNh0bKmm6pJ9LmpNG84elY78BTgYOTCP9w5uPXCUNTiPfHmn/UElTJL0raaqkg4vKHyp63/aSHk9TNo9L2r7o2P2STpP0cKpnnKSVS3wb5gM3AQel93cHDgSubva9Ok/SNEnvSHpS0k6pfE/gV0Wf85mifvxW0sPAB8B6qez76fhFkv5ZVP/vJd0jSWX/A5q1wYF86bAdsBxwY4lzTgSGAFsAmwPbACcVHV8d6AcMBA4HLpC0YkScQjbKvy4iVoiIS0t1RNLywEhgr4joA2wPjG/hvAHA7enclYBzgNubjai/BRwGrAosAxxXqm3gCuC76fUewLPAzGbnPE72PRgA/B24XtJyEXFns8+5edF7vgMMB/oArzSr7+fApumX1E5k37tDwrkxrBM5kC8dVgJeb2Pq42Dg1IiYExFzgd+QBaiCBen4gogYC7wHfLrC/jQBm0jqFRGzImJiC+d8GXgxIq6MiIaIuAZ4HvhK0Tl/i4j/RcSHwBiyANyqiPg/YICkT5MF9CtaOOeqiHgjtXk2sCxtf87LI2Jies+CZvV9QPZ9PAe4CvhJRExvoz6zdnEgXzq8AaxcmNpoxZp8cjT5SipbWEezXwQfACu0tyMR8T7ZlMaPgFmSbpe0URn9KfRpYNH+7Ar6cyVwFLALLfyFIuk4Sc+l6Zy3yf4KKTVlAzCt1MGIeBSYAojsF45Zp3IgXzr8B/gY2LfEOTPJLloWrM3i0w7leh/oXbS/evHBiLgrIr4ErEE2yv5rGf0p9GlGhX0quBI4AhibRssLpamP44EDgBUjoj8wjywAA7Q2HVJymkTSkWQj+5mpfrNO5UC+FIiIeWQXJC+QtK+k3pJ6StpL0lnptGuAkyStki4ankw2FVCJ8cDOktZOF1pHFA5IWk3SsDRX/jHZFE1TC3WMBT6Vlkz2kHQgsDFwW4V9AiAipgJfILsm0FwfoIFshUsPSScDfYuOvwYMbs/KFEmfAk4Hvk02xXK8pJJTQGbt5UC+lEjzvT8ju4A5l2w64CiylRyQBZsngAnAf4GnUlklbd0NXJfqepJPBt9uqR8zgTfJguqPW6jjDWAfsouFb5CNZPeJiNcr6VOzuh+KiJb+2rgLuJNsSeIrwEd8ctqkcLPTG5KeaqudNJV1FfD7iHgmIl4kW/lyZWFFkFlnkC+em5nVN4/IzczqnAO5mVmdcyA3M6tzDuRmZp1A0mUphcWzRWV/kPS8pAmSbpTUv+jYCEmTJb0gaY+i8j1T2WRJJ5TTtgO5mVnnuBzYs1nZ3cAmEbEZ2WqoEQCSNibL+/PZ9J4LJXVPOYAuAPYiW277zXRuSaXu9Ku2WPD6lGr3wWpIz5XXA6DHMgPbONOWJg3zZ8Cim7YqtuD1KSWX8PVceb2SbUTEA5IGNysrzq//CFnKZ8iyjl4bER8DUyVNJstvBDA5IqYASLo2nTupVNsekZuZATQuKLlJGq4sn39hG97OFr4H3JFeD+ST9yhMT2WtlZdUyyNyM7Ou09TSDcaLRMQoYFQlVUs6keyu4avbOrcSDuRmZkA05vNcFEmHkt2lvGtR+uIZwFpFpw1iUR6h1spb5akVMzOAaCq9VSA9kOR44KvNkrTdAhyk7IEu6wIbAo+R5cPfUNK6kpYhuyB6S1vteERuZgbZXHgHSLoGGEqWMno6cArZKpVlgbvTQ6EeiYgfRcRESWPILmI2kD29qzHVcxRZ3p/uwGWt5Ov/ZNs1nGvFq1bsE7xqxVrSWatW5k95rGQwXGa9bWr28XwekZuZkd8ceVdwIDczgw5PrVSTA7mZGVR8QbMWOJCbmQF4asXMrM61cUNQLXMgNzMDoslz5GZm9c0jcjOzOudVK2Zmdc6rVszM6pxXrZiZ1bkGB3Izs7qWclbVJQdyMzPw1IqZWd3z8kMzszrnEbmZWZ3z8kMzszrnVStmZnWujqdW/PBlMzPo8MOXJV0maY6kZ4vKBki6W9KL6euKqVySRkqaLGmCpC2L3nNIOv9FSYeU03UHcjMzyEbkpba2XQ7s2azsBOCeiNgQuCftA+wFbJi24cBFkAV+soc2bwtsA5xSCP6lOJCbmUG2/LDU1oaIeAB4s1nxMGB0ej0a2Leo/IrIPAL0l7QGsAdwd0S8GRFvAXez+C+HxXiO3MwMoLH0nZ2ShpONngtGRcSoNmpdLSJmpdezgdXS64HAtKLzpqey1spLciA3M4M2R90paLcVuEu9PyRFpe8vxVMrZmbQGXPkLXktTZmQvs5J5TOAtYrOG5TKWisvyYHczAyyqZVSW2VuAQorTw4Bbi4q/25avTIEmJemYO4Cdpe0YrrIuXsqK8lTK2Zm0OFcK5KuAYYCK0uaTrb65ExgjKTDgVeAA9LpY4G9gcnAB8BhABHxpqTTgMfTeadGRPMLqItxIDczgw7fEBQR32zl0K4tnBvAka3UcxlwWXvadiA3MwOiKZfrkF3CgdzMDOr6Fn0H8hycdMY5PPDwYwxYsT83XXXxYsdvu+teLr36egjo3bsX/++4o9how/U61Ob8+fMZcdrZTHrhRfr368sfTx3BwDVW47+TXuDXvx8JQBAc8b2D2e0LO3SoLau+PXYfyjnnnEr3bt247G/XcNYfLqh2l+pfHY/IvWolB/vu/SUuPuf0Vo8PXHN1Lj//LG688iJ+dOg3+c1ZI8uue8as1zj0qOMXK7/htnH07bMCd4y5jO8cuC/nXJhNsW2w3jpcd+lI/jn6Av5y9umcetafaWio30daGXTr1o2R5/2Wfb7ybTbdfBcOPHBfPvOZDavdrfrX0FB6q2EO5DnYaotN6de3T6vHP7fpxguPb/bZjXhtzusLj916170c9P1j+NohR/Kbs0bSWOayp3sf/A/D9t4NgN2H7sSjT44nIui13HL06NEdgI/nzwep0o9lNWKbrT/HSy+9zNSpr7JgwQLGjLmZr35lj2p3q/7ls/ywS+QeyCWtI2m39LqXpNYj3FLohtvuYschWwHw0suvcuc9/+bKi8/mn6MvoFu3btw27r6y6pkz9w1WX3VlAHr06M4Ky/fm7XnvADBh4vMMO/iH7PfdH3PyL45aGNitPq05cHWmTZ+5cH/6jFmsuebqVezREqIpSm81LNc5ckk/IMtNMABYn+wupYtpYTlOOn9hLoO//OUvHLb/bnl2r+oee/IZbrhtHFde9EcAHn1iPJOen8xBhx8DwMcff8yAFfsDcPSIU5kx8zUWNCxg1mtz+doh2cqlbx8wjP2+vHvJdjb77EbcfPVfeOnlVznx9LPZacjWLLvsMjl+MrM6VOOj7lLyvth5JFkqxkcBIuJFSau2dnKzXAax4PUpOXevel6YPJWTzzyXi88+jf79+gIQEXx1r9346Y8PW+z8kb87GcjmyE/87dlcfv5Znzi+6iorMXvO66y+6io0NDTy3vsfLKy3YP3Ba9O7Vy9enPIym3zmUzl9MsvbzBmzWWvQmgv3Bw1cg5kzZ1exR0uGqOOHL+c9tfJxRMwv7EjqAdT23yhdYNbsORz7q9P43cm/YPDagxaWD9lqC+6+/yHeeOttAOa98y4zZ79WVp277DiEm8f+C4Bx9z/Itp/fHElMnzl74cXNmbNfY+or0xi4xmqlqrIa9/gT49lgg3UZPHgtevbsyQEHDOPW28ZVu1v1r47nyPMekf9b0q+AXpK+BBwB3Jpzm1X3i1PO5PGnJ/D22++w677f5ojDv0NDuup94H5f5qK//Z1577zL6X/Mlox1796dMZeNZP111+EnP/guw489kaZoomePHpz4syNYc/W2A+/+++zBiNP+wF4HfI9+ffvwh99k+eufmjCRS68cQ48ePejWTZx03JGs2L9ffh/ectfY2Mgxx57E2Nv/Tvdu3bh89HVMmvS/aner/tX4PHgpyu4UzalyqRtwOFniF5Elf7kkymt0iZ5asfbruXK21r7HMm2mZ7alSMP8GZDFlw55/+SDSsal5U+9tmaXfOU9It+X7CkYf825HTOzjqnx6ZNS8p4j/wrwP0lXStonzZGbmdWcaGoqudWyXAN5RBwGbABcD3wTeEnSJXm2aWZWkYam0lsNy32EHBELJN1BtlqlF9l0y/fzbtfMrF2itoN1KbmOyCXtJely4EXga8AlgG9BM7OaEw1NJbdalveI/LvAdcAPI+LjnNsyM6tcHS8/zDWQl3hihplZbanjrKC5TK1Ieih9fVfSO0Xbu5LeyaNNM7OOiMamkls5JP1U0kRJz0q6RtJyktaV9KikyZKuk7RMOnfZtD85HR9cad9zCeQRsWP62ici+hZtfSKib1vvNzPrch3MfihpIHA0sFVEbAJ0Bw4Cfg/8KSI2AN4iu0mS9PWtVP6ndF5F8r7YeWU5ZWZm1dZJFzt7kKUk6QH0BmYBXwT+kY6PJlu5BzAs7ZOO7ypV9sCAvG8I+mzxTvpwn8+5TTOz9mtjRC5puKQnirbhxW+PiBnAH4FXyQL4POBJ4O2IKDxiaDpQyDExEJiW3tuQzl+pkq6362KnpBWBtSJiQhvnjQAKybIKc+IC5rMoTa2ZWc2IhtLTJ83SbC8mxcdhwLrA22Q3Qu7ZiV1sVZsjckn3S+oraQDwFPBXSeeUek9E/C4i+gB/aDY/vlJEjOikvpuZdZ6OPyFoN2BqRMyNiAXADcAOQP+i9CSDgBnp9QxgLVg4W9EPeKOSrpcztdIvIt4B9idLgLVt6nCbImKEpBUlbSNp58JWSUfNzPIUDVFyK8OrwBBJvdNc967AJOA+4OvpnEOAm9PrW9I+6fi9ZWaGXUw5Uys9JK0BHACc2J7KJX0fOIbst9B4YAjwH7LJfzOzmlFmsG79/RGPSvoH2cxFA/A02VTM7cC1kk5PZZemt1wKXClpMvAm2QqXipQTyE8lyyP+UEQ8Lmk9slvuy3EMsDXwSETsImkj4IzKumpmlqNOuAs/Ik4BTmlWPIXskZfNz/0I+EbHWy0jkEfE9WST9oX9KWR5U8rxUUR8JAlJy0bE85I+XWFfzcxys3BdSR1qNZBL+jMlnq8ZEUeXUf90Sf2Bm4C7Jb0FvNLuXpqZ5ayOkx+WHJE/0dHKI2K/9PLXku4juyp7Z0frNTPrbEvkiDwiRhfvS+odER+0p/K0ZLHgv4Wq21OHmVlXqOcReTnryLeTNAl4Pu1vLunCMut/CpgL/I/sAulc4GVJT0nyHZ5mVjOiUSW3WlbOOvJzgT1IC9Uj4hmg3LXgdwN7R8TKEbESsBdwG3AEUO4vAzOz3DU1qORWy8rKtRIR05oVlZu4d0hE3FVUzzhgu4h4BFi2zDrMzHIXTaW3WlbOOvJpkrYHQlJPsrXhz5VZ/yxJvwSuTfsHAq9J6k6nrNo0M+scTTU+fVJKOSPyHwFHkmXqmglskfbL8S2yuzpvAm4kyyvwLbI8vQe0t7NmZnmJJpXcalk5NwS9DhxcSeXpvT+RtHxEvN/s8ORK6jQzy8MSPSKXtJ6kWyXNlTRH0s3pNv02Sdo+rXh5Lu23Z8WLmVmXqecReTlTK38HxgBrAGuS3a5/TZn1/4nKV7yYmXWZpkaV3GpZOYG8d0RcGRENabsKWK7cBjqw4sXMrMvUcyAvlWulcFfmHZJOIFt5EmQrT8aWWX9HVryYmXWZpqjtYF1KqYudT5IF7sKn+2HRsQDKedLPj4DzyFa8zADGUf6KFzOzLtPUmPcjjPNTKtfKuh2tvCMrXszMulJlz+apDWU9fFnSJsDGFM2NR8QVJc4/uUR1ERGnld1DM7Mu0LgkjsgLJJ0CDCUL5GPJ8qU8BLQayIHma8YBlgcOB1YCHMjNrKZEHc+Rl/Mr6OtkDxGdHRGHAZuT5RVvVUScXdjInlnXCziM7IJpWWvQzcy6UmOTSm7lkNRf0j8kPS/puZQ9doCkuyW9mL6umM6VpJGSJkuaIGnLSvteTiD/MCKagAZJfYE5ZLfat/WBBqSHjU4gG/lvGRG/jIg5lXbWzCwvTU0quZXpPODOiNiIbND7HHACcE9EbAjck/Yhm93YMG3DgYsq7Xs5c+RPpMe1/ZVsJct7wH9KvUHSH4D9yUbjm0bEe5V0rufKHrzb4hrmz6h2F2wJ1NHlh5L6kd3weChARMwH5ksaRjY9DTAauB/4JTAMuCIiAngkjebXiIhZ7W27nFwrR6SXF0u6E+gbERPaeNvPgY+Bk4ATpYXfIGVVRt9yOrdKPz+n2RaZO+8FAHosM7DKPbFa0lm/2BubSk9QSBpONnIuGBURo4r21yV7eM7fJG1ONvA9BlitKDjPBlZLrwcCxTdMTk9lnRfIS83XSNoyIp5q7XhE1O/lXzNbKrW1+jAF7VElTukBbAn8JCIelXQei6ZRCnWEpE5f6FhqRH52iWMBfLGT+2JmVjVtjcjLMB2YHhGPpv1/kAXy1wpTJpLWILvOCNlNksXXGwelsnYrdUPQLpVUaGZWjzr6pJuImC1pmqRPR8QLZKv9JqXtEODM9PXm9JZbgKMkXQtsC8yrZH4cyrwhyMxsSdfYOevIfwJcLWkZYArZsutuwBhJhwOvsOihOmOBvcmezfBBOrciDuRmZkBjeY8wLikixgNbtXBo1xbODTop95QDuZkZ9f0Q4XKeECRJ3y7kT5G0tqRt8u+amVnXaUQlt1pWzt8SFwLbAd9M++8CF+TWIzOzKmhqY6tl5UytbBsRW0p6GiAi3koT+WZmS4xG1faou5RyAvkCSd1J6+UlrULt/4IyM2uXphqfPimlnKmVkcCNwKqSfkuWwvaMXHtlZtbFGtvYalk5uVaulvQk2fIZAftGhJ+7aWZLlCV6akXS2mSL1W8tLouIV/PsmJlZV6rn+eJy5shvZ9FDmJcjy/D1AvDZHPtlZtalGpbkEXlEbFq8n7IiHtHK6WZmdamOn73c/js7I+IpSdvm0Rkzs2ppqN8BeVlz5D8r2u1Glm93Zm49MjOrgiV9RN6n6HUD2Zz5P/PpjplZdSyxI/J0I1CfiDiui/pjZlYVS+SqFUk9IqJB0g5d2SEzs2poXEJH5I+RzYePl3QLcD3wfuFgRNyQc9/MzLpMrd+9WUo5c+TLAW+QPaOzsJ48AAdyM1tiNC2hI/JV04qVZ1kUwAvq+QKvmdliGqrdgQ4olTSrO7BC2voUvS5sZmZLjGhjK4ek7pKelnRb2l9X0qOSJku6rpACXNKyaX9yOj64I30vNSKfFRGndqRyM7N60UnLD48BngP6pv3fA3+KiGslXQwcDlyUvr4VERtIOiidd2CljZYakdfxjJGZWft0dEQuaRDwZeCStC+ya4v/SKeMBvZNr4elfdLxXdP5FSkVyBd76rOZ2ZKqgSi5SRou6YmibXizKs4FjmfRkvSVgLcjojD9Ph0YmF4PBKYBpOPz0vkVaXVqJSLerLRSM7N609byw4gYBYxq6ZikfYA5EfGkpKGd3be2tDtplpnZkqiDyw93AL4qaW+yJdt9gfOA/oWbK4FBwIx0/gxgLWC6pB5AP7Jl3hUp51FvZmZLvEai5FZKRIyIiEERMRg4CLg3Ig4G7gO+nk47BLg5vb4l7ZOO3xsRFS/rdiA3MyOb2C61VeiXwM8kTSabA780lV8KrJTKfwacUHkTnloxMwNoc9Rdroi4H7g/vZ4CbNPCOR8B3+iUBnEgNzMDltDsh2ZmS5POGpFXgwO5mRn1Hch9sbMG9e3Xh8uuOI//e/wOHn5sLFttvQW/OOEoJjz3APc9eBP3PXgTu31p52p306poj92HMvHZB3h+0kMc/4sjq92dJUJOFzu7hEfkNeiMM0/k3n89yPe+eww9e/akV+/l2GXXHbn4wsu58M+XVbt7VmXdunVj5Hm/Zc+9v8n06bN45D9jufW2cTz33IvV7lpd84jcOk2fviswZIetueqKLD3DggULeGfeu1XuldWSbbb+HC+99DJTp77KggULGDPmZr76lT2q3a2610SU3GpZroFc0qck3SPp2bS/maST8myz3q2zziDeeP1N/nzh77j3wRv5059Pp3fvXgAc/oODuf/hWzjv/DPo179vGzXZkmrNgaszbfrMhfvTZ8xizTVXr2KPlgwduSGo2vIekf8VGAEsAIiICWR3PbWoOCnNqFEtpjRY4nXv0YPNNt+Yv116DV/caT8+eP9Djv7pcC6/9Bq23uJL7LLjMF57bQ6nnt6h+wfMrJl6niPPO5D3jojHmpW1+iCOiBgVEVtFxFbDhzdPLLZ0mDVjNjNnzOapJycAcOvNd7LZ5hszd+4bNDU1ERFcOfp6Pvf5TavcU6uWmTNms9agNRfuDxq4BjNnzq5ij5YMHpG37nVJ65PS+Ur6OjAr5zbr2pw5rzNzxmzW32BdAHb6wna88MJLrLbaKgvP2Xuf3XjeF7aWWo8/MZ4NNliXwYPXomfPnhxwwDBuvW1ctbtV9xojSm61LO9VK0eSpX3cSNIMYCpwcM5t1r0Rx5/GxZf8kZ49e/LKy9M4+sgRnPH7k9hk042IgGmvzuC4Y0+udjetShobGznm2JMYe/vf6d6tG5ePvo5Jk/5X7W7VvVq/oFmKOpBwq+3Kpe4R0ShpeaBbRLRn+UWs0u/TeXXN6tDceS8A0GOZgW2caUuThvkzoBOeaHbgOvuWDIbXvXJTzT41Le+plamSRgFDgPdybsvMrGJefti6jYB/kU2xTJV0vqQdc27TzKzdfLGzFRHxQUSMiYj9gc+RPTXj33m2aWZWiYgoudWy3O/slPQFSRcCT5I9AumAvNs0M2uvth6+XMtyXbUi6WXgaWAM8IuIeD/P9szMKtVY87f9tC7vEflmEbFfRFzjIG5mtayjUyuS1pJ0n6RJkiZKOiaVD5B0t6QX09cVU7kkjZQ0WdIESVtW2vdcRuSSjo+Is4DfSlrsOxARR+fRrplZpTrhgmYD8POIeEpSH+BJSXcDhwL3RMSZkk4gez7nL4G9gA3Tti1wUfrabnlNrTyXvj6RU/1mZp2qo0sMI2IW6c71iHhX0nPAQGAYMDSdNprseZ6/TOVXRDbcf0RSf0lrpHraJZdAHhG3ppcfRMT1xcckddoDR83MOktjdN4cuaTBZCv1HgVWKwrOs4HV0uuBwLSit01PZe0O5HnPkY8os8zMrKqijf+Ks7OmrcXMfpJWAP4JHBsR73yijWz03elLYPKaI98L2BsYKGlk0aG+lMh+aGZWLW0lxoqIUWS5o1olqSdZEL86Im5Ixa8VpkwkrQHMSeUzgLWK3j4olbVbXiPymWTz4x+RrR8vbLcAfpSJmdWcBppKbm2RJOBS4LmIOKfo0C3AIen1IcDNReXfTatXhgDzKpkfh/zmyJ8BnpF0dUR4BG5mNa8T7t7cAfgO8F9J41PZr4AzgTGSDgdeYdFNkWPJZi4mAx8Ah1XacF5TK2Mi4gDg6WbLD0U2TbRZHu2amVWqozcERcRDtJ6FcdcWzg+yPFQdltfyw2PS131yqt/MrFPVej6VUvKaWinM87wOfBgRTZI+RZYN8Y482jQz64jOXH7Y1fJefvgAsJykgcA4svmjy3Nu08ys3ZyPvHWKiA+A/YELI+IbwGdzbtPMrN0ao6nkVsvyfmanJG1H9pzOw1NZ95zbNDNrt1oP1qXkHciPJbuT88aImChpPeC+nNs0M2u3qPHpk1JyDeQR8W/g35JWkLRCREwBnPnQzGpOPY/Ic50jl7SppKeBicAkSU9K8hy5mdWcpoiSWy3Le2rlL8DPIuI+AElDgb8C2+fcrplZuzRFY7W7ULG8A/nyhSAOEBH3S1o+5zbNzNqt1pcYlpJ3IJ8i6f8BV6b9bwNTcm7TzKzdPEfeuu8BqwA3kKV2XDmVmZnVlMamppJbLcsradZywI+ADYD/kj3HbkEebZmZdQYvP1zcaGAB8CDZA0Y/Q7am3MysJtXz1EpegXzjiNgUQNKlwGM5tWNm1imc/XBxC6dRIqIhe3CGmVntqvV58FLyCuSbSyo8dFRAr7RfeLBE35zaNTOriJcfNhMRToxlZnWlnkfkeS8/NDOrC52RxlbSnpJekDRZ0gk5d3khB3IzM7KLnaW2tkjqDlxAtlJvY+CbkjbOuduAA7mZGQBN0VRyK8M2wOSImBIR84FrgWG5djrJ+xb9Dpk774Vqd8FqUMP8GdXugi2BOmH54UBgWtH+dGDbjlZajloO5F6zmEgaHhGjqt0Pqy3+uehcC+bPKBlzJA0HhhcVjaqV77+nVurD8LZPsaWQfy66UESMioitirbmQXwGsFbR/qBUljsHcjOzzvE4sKGkdSUtAxwE3NIVDdfy1IqZWd1Id7EfBdxF9pD5yyJiYle07UBeH2piHs5qjn8uakxEjAXGdnW7qudEMWZm5jlyM7O650CeI0mNksZLelbS9ZJ6t/P9a0r6R3q9haS9i459tStvAbaOkRSSzi7aP07Sr3No51fN9v+vs9uw2uNAnq8PI2KLiNgEmE/21KSyRcTMiPh62t0C2Lvo2C0RcWbnddVy9jGwv6SVc27nE4E8IrbPuWlr3MEAAAYTSURBVD2rAQ7kXedBYANJAyTdJGmCpEckbQYg6Qtp9D5e0tOS+kganEbzywCnAgem4wdKOlTS+ZL6SXpFUrdUz/KSpknqKWl9SXdKelLSg5I2quLnX9o1kF2c/GnzA5JWkfRPSY+nbYei8rslTZR0Sfp3Xjkduyn9u05MN6og6UyylNHjJV2dyt5LX6+V9OWiNi+X9HVJ3SX9IbU7QdIPc/9OWOdrK1GMt8o34L30tQdwM/Bj4M/AKan8i8D49PpWYIf0eoX0nsHAs6nsUOD8oroX7qe6d0mvDwQuSa/vATZMr7cF7q3292Rp3YD3gL7Ay0A/4Djg1+nY34Ed0+u1gefS6/OBEen1nkAAK6f9AelrL+BZYKXin7kWfgb3A0an18uQ3Urei+ymopNS+bLAE8C61f5+eWvf5uWH+eolaXx6/SBwKfAo8DWAiLhX0kqS+gIPA+ekkdQNETG9HU9Wuo4sgN9HdhPChZJWALYHri+qZ9lO+ExWoYh4R9IVwNHAh0WHdgM2Lvp36pv+/XYkC8BExJ2S3ip6z9GS9kuv1wI2BN4o0fwdwHmSliX7pfBARHwoaXdgM0mFKbx+qa6plX5O63oO5Pn6MCK2KC5oLThHxJmSbiebB39Y0h7AR2W2cwtwhqQBwOeBe4Hlgbebt29Vdy7wFPC3orJuwJCI+MS/d2s/K5KGkgX/7SLiA0n3A8uVajQiPkrn7UH2S//aQnXATyLirvZ+EKsdniPveg8CB8PC/yFfTyO19SPivxHxe7JbfZvPZ78L9Gmpwoh4L73nPOC2iGiMiHeAqZK+kdqSpM1z+URWtoh4ExgDHF5UPA74SWFHUuGX78PAAalsd2DFVN4PeCsF8Y2AIUV1LZDUs5XmrwMOA3YC7kxldwE/LrxH0qckLV/hx7MqcSDver8GPi9pAnAmcEgqPzZd2JxA9vDqO5q97z6yP7/HSzqwhXqvA76dvhYcDBwu6RlgIl2UG9nadDZQvHrlaGCrdLFxEotWN/0G2F3Ss8A3gNlkv9DvBHpIeo7sZ+iRorpGARMKFzubGQd8AfhXZPmyAS4BJgFPpXb+gv9Srzu+s9OsRqX57MbIcnhsB1zkqTJriX/zmtWutYExaWnpfOAHVe6P1SiPyM3M6pznyM3M6pwDuZlZnXMgNzOrcw7kthh1MGtjs7ouL9w1mPKFbFzi3KGS2p3kSdLLLSWjaq282TnvtbOtX0s6rr19NMuTA7m1pGTWRkkVrXaKiO9HxKQSpwwlSytgZu3gQG5tKWRtHJoyKN4CTGota166g/R8SS9I+hewaqEiSfdL2iq93lPSU5KekXSPpMFkvzB+mv4a2KlEVsCVJI0rZAUku828pJayBRYd+1Mqv0fSKqmszcyRko6WNCl9/mubHzfrKl5Hbq1KI++9WHQ795bAJhExNQXDeRGxdbpx5WFJ44DPAZ8GNgZWI7tr8LJm9a4C/BXYOdU1ICLelHQxWba+P6bz/g78KSIekrQ22e3knwFOAR6KiFOVpWYtvt29Nd9LbfQCHpf0z4h4gywnzRMR8VNJJ6e6jyK7Q/JHEfGipG2BC8myVRY7gSxT4MeS+pf1TTXLgQO5taSlrI3bA49FRCErXmtZ83YGromIRmCmpHtbqH8IWfa9qbAw/0hLWssKuDOwf3rv7fpkVsDWtJYtsIlFaQ2uAm5Q+ZkjJwBXS7oJuKmMPpjlwoHcWtJa1sb3i4toIWueih5H1wnalRWwNWpftsBI7ZaTOfLLZL9UvgKcKGnTiGhoV+fMOoHnyK1SrWXNe4DsSUbdJa0B7NLCex8Bdpa0bnrvgFTePMNja1kBHwC+lcr2YlFWwNaUyhbYDSj8VfEtsimbNjNHptvm14qI+4BfpjZWaKMfZrlwILdKtZY170bgxXTsCuA/zd8YEXPJnkxzQ8rMWJjauBXYr3Cxk9JZAXeWNJFsiuXVNvpaKlvg+8A26TN8keyRetB25sjuwFWS/gs8DYyMiLfb6IdZLpxrxcysznlEbmZW5xzIzczqnAO5mVmdcyA3M6tzDuRmZnXOgdzMrM45kJuZ1TkHcjOzOvf/AVeDf/DDUtM+AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x216 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cj3BhuZJ9J-Y"
      },
      "source": [
        "In this project, maximizing recall is prioritized since we want to eliminate as much as false negative as possible. [False Negative: A person is diagnosed to not have stroke, when they are actually likely to have one.]"
      ],
      "id": "cj3BhuZJ9J-Y"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Qgy-AVKbhZr-"
      },
      "source": [
        "#### CLASSIFICATION REPORT"
      ],
      "id": "Qgy-AVKbhZr-"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ASN2mJWihc0T",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5385ce89-31df-4cbe-b89a-7ff34e3d2be6"
      },
      "source": [
        "# XGBoost\n",
        "print(classification_report(y_test,predictions1))"
      ],
      "id": "ASN2mJWihc0T",
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.95      1.00      0.97      1213\n",
            "           1       0.00      0.00      0.00        65\n",
            "\n",
            "    accuracy                           0.95      1278\n",
            "   macro avg       0.47      0.50      0.49      1278\n",
            "weighted avg       0.90      0.95      0.92      1278\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F4CSQln6iAlK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "87ca7bb9-603e-461b-96aa-581ba7875162"
      },
      "source": [
        "# Logistic Regression\n",
        "print(classification_report(y_test,predictions2))"
      ],
      "id": "F4CSQln6iAlK",
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.95      1.00      0.97      1213\n",
            "           1       0.00      0.00      0.00        65\n",
            "\n",
            "    accuracy                           0.95      1278\n",
            "   macro avg       0.47      0.50      0.49      1278\n",
            "weighted avg       0.90      0.95      0.92      1278\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pzE-Jv72eMpC"
      },
      "source": [
        "### 3.B. FINDING THE BEST MODEL"
      ],
      "id": "pzE-Jv72eMpC"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M8rQJGD9kRD4"
      },
      "source": [
        "#### XGBoost"
      ],
      "id": "M8rQJGD9kRD4"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3eU7U_UJfEzT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c9c441e3-9cf5-4090-964e-1c164eef304b"
      },
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "param_grid1 = {'solver': ['svd', 'lsqr', 'eigen']}\n",
        "\n",
        "grid_search1 = GridSearchCV(XGBClassifier(), param_grid1, cv = 10, scoring='accuracy')\n",
        "\n",
        "grid_search1.fit(x_train, y_train)\n",
        "\n",
        "print(\"The best score for this model is\",grid_search1.best_score_)"
      ],
      "id": "3eU7U_UJfEzT",
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The best score for this model is 0.9517229656222803\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kQ0Ld-ENkZfu"
      },
      "source": [
        "#### Logistic Regression"
      ],
      "id": "kQ0Ld-ENkZfu"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J1ujz7EmkCAT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "478cd361-1b8f-4fbf-afae-a458977377f4"
      },
      "source": [
        "# Penalty Testing to avoid overfitting\n",
        "# Using RIDGE REGRESSION (L2 PENALTY)\n",
        "from sklearn.linear_model import Ridge\n",
        "\n",
        "ridge = Ridge()\n",
        "\n",
        "parameters= {'alpha':[2,4,6,8,10]}\n",
        "\n",
        "ridge_reg=GridSearchCV(ridge, parameters,scoring='neg_mean_squared_error',cv=10)\n",
        "ridge_reg.fit(x_train,y_train)\n",
        "print(\"The best parameter is:\",ridge_reg.best_params_)\n",
        "print(\"The best score for this penalty is\",ridge_reg.best_score_)"
      ],
      "id": "J1ujz7EmkCAT",
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The best parameter is: {'alpha': 10}\n",
            "The best score for this penalty is -0.042406900176401\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FDf3OmTLkyD5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "75e8f80c-6047-4c80-b0fd-6fd9f070ea2f"
      },
      "source": [
        "#Using LASSO REGRESSION (L1 PENALTY)\n",
        "from sklearn.linear_model import Lasso\n",
        "\n",
        "lasso = Lasso()\n",
        "\n",
        "parameters= {'alpha':[2,4,6,8,10]}\n",
        "\n",
        "lasso_reg=GridSearchCV(lasso, param_grid=parameters, scoring='neg_mean_squared_error', cv=10)\n",
        "lasso_reg.fit(x_train,y_train)\n",
        "print(\"The best parameter is:\",lasso_reg.best_params_)\n",
        "print('The best score for this penalty is: ',lasso_reg.best_score_)"
      ],
      "id": "FDf3OmTLkyD5",
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The best parameter is: {'alpha': 2}\n",
            "The best score for this penalty is:  -0.04573885039181573\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "StJSnoRQlIjJ"
      },
      "source": [
        "The above testing points out that the L2 penalty with alpha = 10 would be more effective for our model (since -0.046<-0.042)"
      ],
      "id": "StJSnoRQlIjJ"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rN_2DBcul-3w",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6e202c9e-8b9c-403b-af8c-cdccdd182740"
      },
      "source": [
        "param_grid2 = {\n",
        "    'penalty':['l2'],\n",
        "    'C':[1.0,10.0,50.0],\n",
        "    'solver':['newton-cg', 'liblinear']\n",
        "}\n",
        "\n",
        "model_lr= LogisticRegression()\n",
        "\n",
        "grid_search2 = GridSearchCV(\n",
        "    model_lr, param_grid2, cv=10, scoring='accuracy')\n",
        "grid_search2.fit(x_train, y_train)\n",
        "print(\"The best score for this model is\",grid_search2.best_score_)"
      ],
      "id": "rN_2DBcul-3w",
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The best score for this model is 0.9519840622280246\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6V-j3j-3nQ57"
      },
      "source": [
        "Since both models with optimized parameter have a similar best accuracy score, we can train either one of them for our prediction."
      ],
      "id": "6V-j3j-3nQ57"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FOYV0vc0fFWC"
      },
      "source": [
        "### 3.C. APPLYING NEW PARAMETER AND TRAINING THE DATASET"
      ],
      "id": "FOYV0vc0fFWC"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PU-d44GDnlNF"
      },
      "source": [
        "For this particular project, I am choosing XGBoost to train my dataset"
      ],
      "id": "PU-d44GDnlNF"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5I7YfQWRfKbG"
      },
      "source": [
        "# Create an instance of the algorithm using parameters from best_estimator_ property\n",
        "xgb = grid_search1.best_estimator_"
      ],
      "id": "5I7YfQWRfKbG",
      "execution_count": 95,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "87tXgfpdnujZ"
      },
      "source": [
        "# Use the whole dataset to train the model\n",
        "X = np.append(x_train, x_test, axis=0)\n",
        "Y = np.append(y_train, y_test, axis=0)"
      ],
      "id": "87tXgfpdnujZ",
      "execution_count": 96,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6-JCrEHEn0AS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "26d840c5-abce-4df9-8d37-fbdf2a3dc4e1"
      },
      "source": [
        "# Train the model\n",
        "xgb.fit(X, Y)"
      ],
      "id": "6-JCrEHEn0AS",
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
              "              colsample_bynode=1, colsample_bytree=1, gamma=0,\n",
              "              learning_rate=0.1, max_delta_step=0, max_depth=3,\n",
              "              min_child_weight=1, missing=None, n_estimators=100, n_jobs=1,\n",
              "              nthread=None, objective='binary:logistic', random_state=0,\n",
              "              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n",
              "              silent=None, solver='svd', subsample=1, verbosity=1)"
            ]
          },
          "metadata": {},
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K359266QfLQW"
      },
      "source": [
        "### 3.D. FINDING THE BEST THRESHOLD"
      ],
      "id": "K359266QfLQW"
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iwi7nngZxILJ",
        "outputId": "8d85d27f-afb8-43e6-c3d2-49492937adf8"
      },
      "source": [
        "# Finding Best Threshold using G-mean\n",
        "gmeans = np.sqrt(tpr_xgb * (1-fpr_xgb))\n",
        "\n",
        "# Locate the index of the largest g-mean\n",
        "ix = np.argmax(gmeans)\n",
        "print('Best Threshold=%f, G-Mean=%.3f' % (threshold_xgb[ix], gmeans[ix]))"
      ],
      "id": "iwi7nngZxILJ",
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best Threshold=0.053517, G-Mean=0.773\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qOmd5caTzVW8",
        "outputId": "c47b77b5-632f-4bd4-9285-10af5ee0c958"
      },
      "source": [
        "# Finding the best threshold using Youden's J Statistic\n",
        "J = tpr_xgb - fpr_xgb\n",
        "ix = np.argmax(J)\n",
        "best_thresh = threshold_xgb[ix]\n",
        "print('Best Threshold=%f' % (best_thresh))"
      ],
      "id": "qOmd5caTzVW8",
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best Threshold=0.047680\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 278
        },
        "id": "rwvLv8Svymy_",
        "outputId": "38ccac64-1db6-4a07-fd74-27c4af7909d8"
      },
      "source": [
        "# Plotting the roc curve with the threshold\n",
        "from matplotlib import pyplot\n",
        "pyplot.plot([0,1], [0,1], linestyle='--', label='No Skill')\n",
        "pyplot.plot(fpr_xgb, tpr_xgb, marker='.', label='Logistic')\n",
        "pyplot.scatter(fpr_xgb[ix], tpr_xgb[ix], marker='o', color='black', label='Best')\n",
        "\n",
        "# Axis labels\n",
        "pyplot.xlabel('False Positive Rate')\n",
        "pyplot.ylabel('True Positive Rate')\n",
        "pyplot.legend()\n",
        "pyplot.show()"
      ],
      "id": "rwvLv8Svymy_",
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bmju9a0Py5Gj"
      },
      "source": [
        "We take average of both best thrsholds that we can find (Using g-mean and J statistic) we found it to be 0.0505985. Therefore, if the probability belongs to '1' class is larger than 0.0505, then a person is predicted to have a stroke."
      ],
      "id": "bmju9a0Py5Gj"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NmhvD8QBSDX2"
      },
      "source": [
        "---"
      ],
      "id": "NmhvD8QBSDX2"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YcFcpaaOfvva"
      },
      "source": [
        "## 4) PREDICTION"
      ],
      "id": "YcFcpaaOfvva"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x79DUU6L1YQv"
      },
      "source": [
        "# Define a function to test our prediction:\n",
        "def prediction(data):\n",
        "    data_scaled = sc.transform(ct.transform(data))\n",
        "    predict = xgb.predict_proba(data_scaled)[:,1]\n",
        "    if predict > 0.05:\n",
        "        print(\"The person is likely to have a stroke.\")\n",
        "    else:\n",
        "        print(\"The person is not likely have a stroke.\")"
      ],
      "id": "x79DUU6L1YQv",
      "execution_count": 101,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5qIkpBxmf1On",
        "outputId": "0bbc611d-e586-4c59-f183-d3b6fb8125c6"
      },
      "source": [
        "# We create a new person's infomation to test our prediction\n",
        "patient = pd.DataFrame([[0, 25, 0, 0, 0, 'Private', 1, 125, 25, 'Unknown']])\n",
        "\n",
        "# We use our function to predict:\n",
        "prediction(patient)"
      ],
      "id": "5qIkpBxmf1On",
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The person is not likely have a stroke.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/compose/_column_transformer.py:430: FutureWarning: Given feature/column names or counts do not match the ones for the data given during fit. This will fail from v0.24.\n",
            "  FutureWarning)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hb7m8YmdYe7p"
      },
      "source": [
        "Analysis:\n",
        "\n",
        "Prediction model points out that this with information: (0, 25, 0, 0, 0, 'Private', 1, 125, 25, 'Unknown') (Gender = Female (0), Age = 25 Years Old, Hypertension = No (0), Heart Disease = No (0), Ever Married = No (0), Work Type = Private, Residence Type = Urban (1), Average Glucose Level = 125, Body Mass Index = 25, Smoking Status = Unkwon) is predicted to not have any stroke."
      ],
      "id": "hb7m8YmdYe7p"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NFa6V-CESGHa"
      },
      "source": [
        "---"
      ],
      "id": "NFa6V-CESGHa"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fxCN6Vszf1_P"
      },
      "source": [
        "## 5) CONCLUSION"
      ],
      "id": "fxCN6Vszf1_P"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QAB_30OJR8WX"
      },
      "source": [
        "In summary, using the XGBoost algorithm, I am able to achieve an accuracy of 95.2%. Keep in mind that there is still much space for further study, analysis, and optimisation. Fitting a machine learning model to resolve a problem with a specific dataset is an improvement process. Furthermore, according to my findings in this project, this is by far one of the best algorithms to predict stroke disease."
      ],
      "id": "QAB_30OJR8WX"
    }
  ]
}